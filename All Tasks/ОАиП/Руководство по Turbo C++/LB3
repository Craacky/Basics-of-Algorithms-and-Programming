                        Г Л А В А   3

                    ГЛОБАЛЬНЫЕ  ПЕРЕМЕННЫЕ

     Для обслуживания многочисленных общих потребностей,  нап-
ример,  для работы с датами,  временем,  аргументами командной
строки и т.п.,  Borland C++ предоставляет Вам предопределенные
глобальные  переменные,  которые  определяются и описываются в
настоящей главе.

     _8087
──────────────────────────────────────────────────────────────
Функция        Флаг сопроцессора.

Синтаксис      extern int _8087;

Объявлено в    dos.h

Примечания     Переменная _8087  устанавливается  в  ненулевое
               значение (1,  2 или 3), если логика автообнару-
               жения  (в  коде  инициализации)  выявит наличие
               сопроцессора с плавающей  точкой  (8087,  80287
               или 80387 соответственно).  В остальных случаях
               переменная _8087 устанавливается в 0.
               Результат работы логики  автообнаружения  можно
               переопределить, установив переменную среды 87 в
               значение YES или NO командой SET 87=YES или SET
               87=NO  (отсутствие пробелов перед и после знака
               равенства существенно).  В этом случае перемен-
               ная _8087 будет отражать переопределение.
               Обратитесь к Главе 6 "Модели памяти,  плавающая
               точка,  оверлеи" в Руководстве Программиста для
               получения  более полной информации о переменной
               среды 87.

     _argc
──────────────────────────────────────────────────────────────
Функция        Содержит число аргументов командной строки.

Синтаксис      extern int _argc;

Объявлено в    dos.h

Примечания     _argc имеет значение argc, передаваемое в функ-
               цию main при запуске программы.

     _argv
──────────────────────────────────────────────────────────────
Функция        Массив указателей  на аргументы командной стро-
               ки.

Синтаксис      extern char *_argv[];

Объявлено в    dos.h

Примечания     _argv указывает на массив,  содержащий исходные
               значения аргументов командной строки (элементов
               argv[]),  переданных в функцию main при запуске
               программы.

     _ctype
──────────────────────────────────────────────────────────────
Функция        Массив атрибутов символов.

Синтаксис      extern char _ctype[];

Объявлено в    ctype.h

Примечания     _ctype -  это  массив  информации  об атрибутах
               символа,  индекс  которого  есть  (ASCII-значе-
               ние)+1.  Каждый  элемент  -  это  набор  битов,
               описывающих символ.
               Этот массив  используется  функциями   isdigit,
               isprintf, и т.п.

     daylight
──────────────────────────────────────────────────────────────
Функция        Показывает, будет ли учитываться режим летнего
               времени.

Синтаксис      extern int daylight;

Объявлено в    time.h

Примечания     daylight используется  функциями,  связанными с
               датами и временем.  Эта переменная устанавлива-
               ется  функциями  tzset,  ftime и localtime в 1,
               если режим летнего времени будет учитываться, и
               в 0, если время считается стандартным.

     directvideo
──────────────────────────────────────────────────────────────
Функция        Флаг, который управляет видео выводом.

Синтаксис      extern int directvideo;

Объявлено в    conio.h

Примечания     directvideo определяет,  будет  ли  вывод Вашей
               программы на  консоль  (например,   посредством
               cputs)  осуществляться непосредственно в видео-
               память (directvideo = 1) или через обращение  к
               сервису ROM BIOS (directvideo = 0).
               Значение, принятое  для  directvideo по умолча-
               нию,  равно 1 (вывод на консоль  осуществляется
               непосредственно  в  видеопамять).  Чтобы  иметь
               возможность использовать значение directvideo =
               1, видеоадаптер Вашей системы должен быть иден-
               тичен  дисплейным   адаптерам   IBM.   Значение
               directvideo  = 0 позволяет Вам осуществлять вы-
               вод на консоль в любой системе,  совместимой  с
               BIOS IBM.

     environ
──────────────────────────────────────────────────────────────
Функция        Доступ к переменным среды DOS.

Синтаксис      extern char *environ[];

Объявлено в    dos.h

Примечания     environ - это массив указателей на  строки;  он
               используется для доступа к переменным среды DOS
               и их изменения. Каждая строка имеет вид
                  envvar = varvalue
               где envvar  -  это имя переменной среды (напри-
               мер,  PATH), а varvalue - строка, являющаяся ее
               значением (например, С:\BIN; C:\DOS). Эта стро-
               ка может быть пустой.
               Когда начинается  выполнение программы,  строки
               среды DOS передаются непосредственно в програм-
               му.  Заметьте, что env - третий аргумент, пере-
               даваемый  в  main,  равен  начальному  значению
               environ.
               Доступ к  массиву  environ  возможен  с помощью
               функции getenv;  однако функция putenv является
               единственной процедурой, которая должна исполь-
               зоваться для добавления, изменения или удаления
               элементов этого массива. Это связано с тем, что
               модификация может изменить размер массива и да-
               же переместить его, а переменная environ должна
               автоматически устанавливаться так, чтобы всегда
               указывать на массив.

См. также      getenv, putenv

     errno, _doserrno, sys_errlist, sys_nerr
──────────────────────────────────────────────────────────────
Функция        Обеспечивает функции  perror  возможность печа-
               тать сообщения об ошибках.

Синтаксис      extern int errno;
               extern int _doserrno;
               extern char *sys_errlist[];
               extern int sys_nerr;

Объявлено в    errno.h, stdlib.h       (errno,      _doserrno,
               sys_errlist, sys_nerr)
               dos.h (_doserrno)

Примечания     errno, sys_errlist   и   sys_nerr  используются
               функцией perror для печати сообщений  об  ошиб-
               ках, когда некоторым библиотечным процедурам не
               удается    выполнить    запрошенную    функцию.
               _doserrno - это переменная,  которая отображает
               многие коды ошибок DOS в errno;  однако, perror
               не использует _doserrno непосредственно.
               _doserrno: Когда   в   результате  обращения  к
               системной   функции   DOS   возникает   ошибка,
               _doserrno  устанавливается в действительный код
               ошибки   DOS.   errno   является   параллельной
               _doserrno переменной для кода ошибок, унаследо-
               ванной из UNIX.
               errno: Когда в результате обращения к системной
               или  математической  функции  возникает ошибка,
               значение errno указывает на тип ошибки.  Иногда
               значения errno и _doserrno совпадают.  В других
               случаях errno не  содержит  действительный  код
               ошибки  DOS,  который  содержится  в _doserrno.
               Кроме  того,  возможны  такие  ошибки,  которые
               устанавливают только errno, но не _doserrno.
               sys_errlist: Эта  переменная  определяет массив
               строк сообщений и предназначена для  управления
               форматированием сообщений. Переменная errno мо-
               жет быть использована как индекс этого  массива
               для поиска строки, соответствующей номеру ошиб-
               ки. Строки массива не включают символов перево-
               да строки.
               sys_nerr: Эта  переменная  определена как число
               строк   сообщений   об   ошибках   в    массиве
               sys_errlist.
               В следующей  таблице приведены мнемоники и зна-
               чения  для  строк,  хранящихся  в  sys_errlist.
               ───────────────────────────────────────────────
                Мнемоника                Значение
               ───────────────────────────────────────────────
                E2BIG      Слишком длинный список аргументов
                EACCES     Доступ запрещен
                EBADF      Неверный номер (обработчика) файла
                ECONTR     Разрушены блоки памяти
                ECURDIR    Попытка удалить текущий справочник
                EDOM       Ошибка области определения
                EEXIST     Файл уже существует
                EFAULT     Неизвестная ошибка
                EINVACC    Неверный код доступа
                EINVAL     Неверный аргумент
                EINVDAT    Неверные данные
                EINVDRV    Указано неверное устройство
                EINVENT    Неверная среда
                EINVFMT    Неверный формат
                EINVFNC    Неверный номер функции
                EINVMMEM   Неверный адрес блока памяти
                EMFILE     Слишком много открытых файлов
                ENMFILE    Файлов больше нет
                ENODEV     Устройство отсутствует
                ENOENT     Файл или справочник не существует
                ENOEXEC    Ошибка в формате exe-файла
                ENOFILE    Файл или справочник не существует
                ENOMEM     Недостаточно памяти
                ENOPATH    Путь не найден
                ENOTSAM    Другое устройство
                ERANGE     Результат вне допустимого диапазона
                EXDEV      Перекрестная связь устройств
                EZERO      Ошибка 0
               ───────────────────────────────────────────────
               В следующем   списке  приведены  мнемоники  для
               действительных кодов ошибок DOS,  в которые мо-
               жет  устанавливаться переменная _doserrno.  Эти
               значения могут быть или не быть соотнесены (че-
               рез errno) c аналогичными строками сообщений об
               ошибках в sys_errlist.
               ───────────────────────────────────────────────
                Мнемоника          Код ошибки DOS
               ───────────────────────────────────────────────
                 E2BIG          Неверная среда
                 EACCES         Доступ запрещен
                 EACCES         Неверный доступ
                 EACCES         Является текущим справочником
                 EBADF          Неверный обработчик
                 EFAULT         Зарезервировано
                 EINVAL         Неверные данные
                 EINVAL         Неверная функция
                 EMFILE         Слишком много открытых файлов
                 ENOENT         Файл или справочник не существует
                 ENOEXEC        Неверный формат exe-файла
                 ENOMEM         Разрушен Mcb
                 ENOMEM         Недостаточно памяти
                 ENOMEM         Неверный блок памяти
                 EXDEV          Неверное устройство
                 EXDEV          Другое устройство
               ───────────────────────────────────────────────
               За более  полной информацией о кодах ошибок об-
               ратитесь к Вашему руководству по DOS.

Пример         #include <errno.h>
               #include <stdio.h>
               extern char *sys_errlist[];
               int main(void)
               {  int i = 0;
                  while (sys_errlist[i++])
                    printf("%s\n", sys_errlist[i]);
                  return 0;
               }

     _fmode
──────────────────────────────────────────────────────────────
Функция        Определяет режим преобразования файла, принятый
               по умолчанию.

Синтаксис      extern int _fmode

Объявлено в    fcntl.h

Примечания     _fmode определяет,  в каком  режиме  (текстовом
               или  двоичном) будут открываться и преобразовы-
               ваться файлы.  Значение  переменной  _fmode  по
               умолчанию - O_TEXT, что означает, что файлы бу-
               дут читаться в текстовом  режиме.  Если  _fmode
               установлена  в O_BINARY,  файлы будут открыты и
               прочитаны в двоичном режиме. (O_TEXT и O_BINARY
               определены в fcntl.h).
               В текстовом  режиме при вводе комбинация симво-
               лов CR/LF (возврат каретки/перевод строки)  пе-
               реводится в одиночный символ LF. На выходе осу-
               ществляется обратное преобразование символа  LF
               в комбинацию символов CR/LF.
               В двоичном  режиме  никаких  преобразований  не
               производится.
               Вы можете  изменить  режим,  установленный   по
               умолчанию в  _fmode,  если  включите в аргумент
               type  библиотечных  функций  fopen,  fdopen   и
               freopen  символ t для текстового режима или b -
               для  двоичного.  Кроме  того,  аргумент  access
               функции  open может включать либо O_TEXT,  либо
               O_BINARY,  которые явно определяют, в текстовом
               или двоичном режиме будет открыт файл (заданный
               в аргументе pathname функции open).

     _heaplen
──────────────────────────────────────────────────────────────
Функция        Содержит длину ближней кучи.

Синтаксис      extern unsigned _heaplen;

Объявлено в    dos.h

Примечания     _heaplen определяет  размер  (в байтах) ближней
               кучи в малых  моделях  памяти  (tiny,  small  и
               medium). _heaplen не существует в больших моде-
               лях памяти (compact, large и huge), так как они
               не имеют ближней кучи.
               В моделях small и medium размер сегмента данных
               вычисляется следующим образом:
                сегмент_данных [small, medium] =
                            = глобальные_данные + куча + стек,
               где размер  стека  может  быть установлен с по-
               мощью _stklen.
               Если _heaplen установлена в 0,  программа расп-
               ределяет 64К для сегмента  данных,  и  полезный
               размер кучи составит:
                64К - (глобальные_данные + стек)  байтов
               По умолчанию _heaplen равна 0, поэтому Вы полу-
               чите сегмент данных длиной 64K, если не опреде-
               лите собственное значение для _heaplen.
               В модели tiny все (включая код) находится в од-
               ном и том же сегменте, поэтому вычисление длины
               сегмента  данных  будет  включать  код плюс 256
               байтов  для  префикса   программного   сегмента
               (PSP):
                сегмент_данных [tiny] =
                 = 256 + код + глобальные_данные + куча + стек
               Если _heaplen  равна 0 в модели tiny,  полезный
               размер кучи получается  вычитанием  PSP,  кода,
               глобальных данных и стека из 64К.
               В моделях  compact и large нет ближней кучи,  а
               стек находится в собственном сегменте, поэтому
                сегмент_данных [compact, large] =
                                           = глобальные_данные
               В модели huge стек является  отдельным  сегмен-
               том,  и  каждый  модуль  имеет свой собственный
               сегмент данных.

См. также      _stklen

     _new_handler
──────────────────────────────────────────────────────────────
Функция        Перехватывает обработку   ошибок  распределения
               памяти.

Синтаксис      typedef void(*pvf)();
               pvf _new_handler;
               Или, по-другому,  можно   установить   значение
               _new_handler         посредством        функции
               set_new_handler, например:
               pvt set_new_handler(pvt p);

Примечания     Переменная _new_handler  содержит  указатель на
               функцию без аргументов,  возвращающую тип void.
               Если operator new() не смог распределить требу-
               емую память,  он вызовет  функцию,  указываемую
               переменной _new_handler; после возврата из этой
               функции вновь будет предпринята попытка распре-
               делить память. По умолчанию, функция, указывае-
               мая переменной _new_handler,  просто  завершает
               выполнение  программы.  Однако  программа может
               заменить этот обработчик  на  функцию,  которая
               попытается  освободить  некоторый объем памяти.
               Такая  замена  может   быть   произведена   не-
               посредственным  присваиванием значения перемен-
               ной  _new_handler  или  обращением  к   функции
               set_new_handler,  которая  возвращает указатель
               на предыдущий обработчик.
               Переменная _new_handler  введена  прежде  всего
               для  совместимости  с  C++ версии 1.2.  В боль-
               шинстве  случаев  тот  же  эффект  может   быть
               достигнут перезагрузкой operator new().

     _openfd
──────────────────────────────────────────────────────────────
Функция        Массив режимов доступа.

Синтаксис      extern unsigned int _openfd[]

Объявлено в    io.h

Примечания     _openfd является массивом режимов  доступа  для
               файлов и устройств.

     _osmajor, _osminor
──────────────────────────────────────────────────────────────
Функции        Содержат номера версии и выпуска DOS.

Синтаксис      extern unsigned char _osmajor;
               extern unsigned char _osminor;

Объявлено в    dos.h

Примечания     Номера версии и выпуска DOS могут быть получены
               независимо  друг  от  друга  через  _osmajor  и
               _osminor. _osmajor - номер версии, а _osminor -
               номер  выпуска.  Например,  если Вы работаете с
               версией  DOS  3.20,  то  _osmajor  будет  3,  а
               _osminor  будет  20.  Эти переменные могут быть
               полезны,  когда Вы хотите  написать  программы,
               которые  будут  выполняться в версиях DOS 2.x и
               3.x.  Некоторые библиотечные программы работают
               по-разному  в  зависимости от номера версии,  а
               другие работают только с версией DOS 3.x. (См.,
               например,  функции  _open,  creatnew  и ioctl в
               предыдущей главе данного руководства).

     _ovrbuffer
──────────────────────────────────────────────────────────────
Функции        Изменяет размер буфера оверлеев.

Синтаксис      unsigned _ovrbuffer = size;

Объявлено в    dos.h

Примечания     По умолчанию размер буфера оверлеев равен удво-
               енному размеру   наибольшего   оверлея.   Этого
               достаточно для большинства  приложений.  Однако
               представьте,  что некоторая функция в программе
               реализована посредством множества модулей, каж-
               дый  из  которых  - оверлейный.  Если суммарный
               размер этих модулей превышает буфер оверлеев, и
               если  модули  часто  обращаются один к другому,
               обмен с диском будет занимать значительное вре-
               мя.
               Решение заключается в том,  чтобы увеличить за-
               мер  буфера  оверлеев  настолько,  чтобы всегда
               имелось достаточно памяти для  размещения  всех
               оверлеев,  которые часто обращаются друг к дру-
               гу. Это можно сделать, установив глобальную пе-
               ременную _ovrbuffer в требуемое значение разме-
               ра в  параграфах.  Например,  чтобы  установить
               размер оверлейного буфера 128K,  включите в Ваш
               код следующий оператор:
                  unsigned _ovrbuffer = 0x2000;
               Не существует  общей  формулы  для  определения
               идеального   размера   буфера  оверлеев.  Turbo
               Profiler фирмы Borland может  помочь  подобрать
               подходящее значение.

См. также      _OvrInitEms, _OvrInitExt

     _psp
──────────────────────────────────────────────────────────────
Функция        Содержит адрес сегмента  префикса  программного
               сегмента (PSP) текущей программы.

Синтаксис      extern unsigned int _psp;

Объявлено в    dos.h

Примечания     PSP - это дескриптор процесса DOS;  он содержит
               первоначальную информацию о программе.  Обрати-
               тесь к Руководству Программиста по DOS для  по-
               лучения более полной информации о PSP.

     _stklen
──────────────────────────────────────────────────────────────
Функция        Содержит размер стека.

Синтаксис      extern unsigned _stklen;

Объявлено в    dos.h

Примечания     _stklen определяет размер стека для всех  шести
               моделей  памяти.  Минимальный допустимый размер
               стека 128 слов;  если Вы дадите меньшее  значе-
               ние, _stklen автоматически установит допустимый
               минимум. По умолчанию размер стека 4К.
               В моделях small и medium размер сегмента данных
               вычисляется следующим образом:
                сегмент_данных [small, medium] =
                            = глобальные_данные + куча + стек,
               где размер кучи может быть определен с  помощью
               _heaplen.
               В модели tiny все (включая код) находится в од-
               ном и том же сегменте, поэтому вычисление длины
               сегмента  данных  будет  включать  код плюс 256
               байтов  для  префикса   программного   сегмента
               (PSP):
                сегмент_данных [tiny] =
                 = 256 + код + глобальные_данные + куча + стек
               В моделях  compact и large нет ближней кучи,  а
               стек находится в собственном сегменте, поэтому
                сегмент_данных [compact, large] =
                                           = глобальные_данные
               В модели huge стек является  отдельным  сегмен-
               том,  и  каждый  модуль  имеет свой собственный
               сегмент данных.

См. также      _heaplen

Пример         #include <stdio.h>
               /* Установить размер стека больший,
                  чем по умолчанию */
               /* Это объявление должно быть в области
                  глобальных данных */
               extern unsigned _stklen = 54321U;
               int main(void)
               {   /* Показать текущую длину стека */
                   printf("The stack length is: %u\n",
                          _stklen);
                   return 0;
                }

     timezone
──────────────────────────────────────────────────────────────
Функция
               Содержит разницу  в секундах между местным вре-
               менем и временем по Гринвичу (GMT).

Синтаксис      extern long timezone;

Объявлено в    time.h

Примечания     timezone используется функциями,  определяющими
               время и дату.
               Эта переменная вычисляется функцией tzset;  Она
               принимает значение типа long,  которое является
               разницей  в секундах между текущим местным вре-
               менем и временем по Гринвичу.

     tzname
──────────────────────────────────────────────────────────────
Функция
               Массив указателей на наименования  часовых  по-
               ясов.

Синтаксис      extern char *tzname[2]

Объявлено в    time.h

Примечания     Глобальная переменная  tzname является массивом
               указателей на строки,  содержащие  аббревиатуры
               имен  часовых  поясов.  tzname[0]  указывает на
               трехсимвольную строку с именем  часового  пояса
               из   строки  среды  TZ.  Глобальная  переменная
               tzname[1] указывает на трехсимвольную строку из
               окружения  TZ с именем часового пояса с режимом
               летнего времени.  Если такое  имя  отсутствует,
               tzname[1] указывает на пустую строку.

     _version
──────────────────────────────────────────────────────────────
Функция        Содержит номер версии DOS.

Синтаксис      extern unsigned int _version;

Объявлено в    dos.h

Примечания     _version содержит номер версии  DOS  в  младшем
               байте,  и номер выпуска - в старшем байте. (Для
               версии DOS x.y,  x - это номер версии,  y - это
               номер выпуска).

     _wscroll
──────────────────────────────────────────────────────────────
Функция        Разрешает или  запрещает  скроллинг в  функциях
               ввода/вывода на консоль.

Синтаксис      extern int _wscroll

Объявлено в    conio.h

Примечания     _wscroll - это флаг  ввода/вывода  на  консоль.
               Его значение по умолчанию 1. Если Вы установите
               его в 0, скроллинг будет  запрещен.  Это  может
               быть  полезным  для  рисования близ границ окна
               без прокрутки экрана.
