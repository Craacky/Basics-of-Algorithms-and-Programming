                           ГЛАВА 1.

                        ФУНКЦИЯ main.

     Каждая программа на C или C++ должна иметь функцию  main;
куда Вы поместите ее - дело вкуса.  Некоторые программисты по-
мещают функцию main в начало файла,  другие - в конец. Вне за-
висимости от ее дислокации,  следующие положения всегда приме-
нимы.

                  Аргументы главной функции.

     Три параметра передаются в main процедурой начальной заг-
рузки Borland C++: argc, argv, env.
     - argc,  целое,  содержащее  число  аргументов  командной
строки, передаваемых в main.
     - argv - массив указателей на строки (char *[]).
        * В  DOS 3.x arg[0] - это полное имя выполняемой прог-
          раммы.
        * В версиях DOS до 3.0  arg[0]  указывает  на  нулевую
          строку.
        * argv[1] указывает на первую строку,  набранную в ко-
          манде DOS после имени программы.
        * argv[2] указывает на вторую строку,  набранную после
          имени программы.
        * argv[argc - 1] указывает на последний аргумент,  пе-
          редаваемый в main.
        * argv[argc] содержит ноль.
     - env - также массив указателей на строки. Каждый элемент
массива содержит строку вида ENVVAR=value.
        * ENVVAR - это имя переменной  среды,  например,  PATH
          или 87.
        * value  -  значение в которое устанавливается ENVVAR,
          например, C:\DOS; C:\TC (для PATH) или YES (для 87).
     Если Вы объявляете  какие-либо  из  этих  параметров,  Вы
должны  объявлять их строго в следующем порядке:  argc,  argv,
env. Например, следующие объявления правильны:
     main()
     main(int argc)
     main(int argc, char *argv[])
     main(int argc, char *argv[], char *env[])
     Объявление main(int argc) корректно, но маловероятно, что
Вы будете использовать argc в Вашей программе без  использова-
ния элементов argv.
     Аргументы env также доступны через глобальную  переменную
environ.  См.  описание  environ  в Главе 2,  а также putenv и
getenv в этой главе для дальнейшей информации.
     argc и  argv  также  доступны через глобальные переменные
_argc и _argv.

                      Пример программы.

     Приведем пример   программы   ARGS.EXE,   демонстрирующей
простой способ использования аргументов, передаваемых в main.
     /* Программа ARGS.C */
     #include <stdio.h>
     #include <stdlib.h>
     int main(int argc, char *argv[], char *env[])
     {  int i;
        printf("The value of argc is%d \n\n", argc);
        printf("These are the %d command-line arguments "
               "passed to main: \n\n", argc);
        for (i = 0; i < argc; i++);
           printf("    argv[%d]: %s\n", i, argv[i]);
        printf("\nThe environment string(s) on this system "
               "are:\n\n");
        for (i = 0; env[i] !=NULL; i++);
           printf("    env[%d]: %s\n", i, env[i]);
        return 0;
     }
     Предположим, Вы выполняете ARGS.EXE со следующей  команд-
ной строкой:
  C:>args first_arg "arg with blanks" 3 4 "last but one" stop!
     Заметим, что  Вы можете передавать аргументы,  содержащие
пробелы,  заключив их в двойные кавычки,  как это сделано выше
для "arg with blanks" и "last but one".
     Вывод ARGS.EXE (предполагая,  что переменные среды  уста-
новлены, как здесь) может быть таким:

     The value of argc is 7

     These are the 7 command-line arguments passed to main:

         argv[0]: C:\TC\TESTARGS.EXE
         argv[1]: first_arg
         argv[2]: arg with blanks
         argv[3]: 3
         argv[4]: 4
         argv[5]: last but one
         argv[6]: stop!

     The environment string(s) on this system are:

         env[0]: COMSPEC=C:\COMMAND.COM
         env[1]: PROMPT=$p $q
         env[2]: PATH= C:\SPRINT;C:\DOS;C:\TC

     Максимальная общая длина аргументов командной строки, пе-
редаваемых в main (включая разделяющие их пробелы и  само  имя
программы) - 128 символов; это - ограничение DOS.

              Символы шаблона в аргументах main.

     Аргументы командной  строки,  содержащие  символы шаблона
(*,  ?), расширяются до всех соответствующих имен файлов, ана-
логично тому, как это делает DOS при использовании команд типа
COPY.  Единственное,  что Вы должны сделать,  чтобы иметь  эту
возможность  -  отредактировать  Вашу программу с WILDARGS.OBJ
файлом, входящим в состав Borland C++.
     Однажды отредактировав Вашу программу с WILDARGS.OBJ,  Вы
можете передавать аргументы,  содержащие символы шаблона, нап-
ример,  *.*,  в Вашу функцию main. Аргумент будет расширен ( в
массиве argv) до всех файлов,  соответствующих заданной маске.
Максимальный размер массива argv зависит от количества свобод-
ной памяти в куче.
     Если соответствующих файлов не найдено, то аргумент пере-
дается без изменений (Это значит,  что в main передается стро-
ка, содержащая заданную маску).
     Аргументы, заключенные в кавычки ("..."), не расширяются.
     Следующие команды  компилируют  файл ARGS.C,  редактируют
его с модулем расширения WILDARGS.OBJ и  затем  выполняют  ре-
зультирующий файл ARGS.EXE:
     bcc args wildargs.obj
     args C:\BORLANDC\INCLUDE\*.H  "*.C"
     Когда Вы выполняете ARGS.EXE, первый аргумент расширяется
до    всех    имен    файлов    вида    *.H    в   справочнике
C:\BORLANDC\INCLUDE. Заметим, что результатом расширения аргу-
мента являются строки, содержащие полное имя файла с путем по-
иска. Аргумент *.С не расширяется, т.к. заключен в кавычки.
     В интегрированной  среде (BC.EXE или BCX.EXE) просто ука-
жите файл проекта (из меню project),  который содержит следую-
щие строки:
     ARGS
     WILDARGS.OBJ
     Затем используйте опцию Run/Arguments для установки пара-
метров командной строки.
     Если Вы хотите использовать расширения с помощью маски по
умолчанию, измените Вашу стандартную библиотеку C?.LIB для ав-
томатического редактирования с WILDARGS.OBJ. Для этого удалите
из  библиотек  SETARGV и добавьте WILDARGS.  Следующие команды
вызывают Турбо-библиотеку TLIB для модификации всех  стандарт-
ных библиотечных файлов (в предположении, что текущий справоч-
ник  содержит  стандартные  библиотеки  C  и  C++,   а   также
WILDARGS.OBJ):
     tlib cs -setargv +wildargs
     tlib cc -setargv +wildargs
     tlib cm -setargv +wildargs
     tlib cl -setargv +wildargs
     tlib ch -setargv +wildargs
     Дальнейшую информацию о TLIB см.  в Главе 7 "Утилиты" Ру-
ководства Пользователя.

       Использование -p (соглашения о вызовах Паскаля).

     Если Вы компилируете вашу программу, используя соглашения
о  вызовах  Паскаля (детально описанные в Главе 9 "Интерфейс с
языком Ассемблера" Руководства Программиста),  Вы должны  явно
объявить  main,  как типа С.  Сделайте это с помощью ключевого
слова cdecl:
     cdecl  main(int argc, char *argv[], char *envp[])

                 Значение, возвращаемое main.

     Значение возвращаемое main - код статуса программы,  типа
int.  Однако, если Вы используете функцию exit (или _exit) для
завершения,  значение, возвращаемое main - это аргумент, пере-
даваемый при вызове exit (или _exit).
     Например, если Ваша программа содержит вызов
        exit(1)
main возвратит 1.
     Если Вы используете  интегрированную  среду  (BC.EXE  или
BCX.EXE)  для  выполнения  Вашей программы,  Вы можете увидеть
возвращаемое из main значение, выбрав File/Get Info.
